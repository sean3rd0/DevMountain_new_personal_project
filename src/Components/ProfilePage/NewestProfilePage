import React from "react"
import axios from "axios"
import {connect} from "react-redux"
import {updateUserOnReduxState, updateCurrentPageOnReduxState, updatePostsOnCurrentPageOnReduxState, addNewPost, getReduxState} from "../../ducks/reducers/reducer"
import Nav from "../Nav/Nav"
import UserDisplay from "../UserDisplay/UserDisplay"
import PostTemplate from "../PostTemplate/PostTemplate"
import "./ProfilePage.css"

class ProfilePage extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            leftDropdown: false, 
            rightDropdown: false
        }
    }

    componentDidMount = () => {
        axios
            .get(`/api/landingpage/personid/${this.props.match.params.personid}`)
            .then(response => {
                console.log('this is profilePage componentDidMount OUTER response.data: ', response.data)
                this.props.updateCurrentPageOnReduxState(response.data);
                axios
                    .get(`/api/personid/${this.props.match.params.personid}/pageid/${this.props.match.params.pageid}`)
                    .then(response => { 
                        console.log('this is profilePage componentDidMount INNER response.data: ', response.data)
                        // if (response.data[0].post_id) {
                            this.props.updatePostsOnCurrentPageOnReduxState(response.data)
                        // }
                    })
                    .catch(err => {console.log('this is the error that came back from the ProfilePage componentDidMount INNER axios.get request: ', err)})
            })
            .catch(err => {
                console.log('this is the error that came back from the ProfilePage componentDidMount OUTER axios.get request: ', err)
            })
    }

    // componentDidUpdate = (prevProps, prevState) => {
    //     if ((prevProps !== this.props) || (prevState !== this.state)) {
    //         this.props.getReduxState()
    //     }
    // }
    

    handlePostSubmit = (postText, photoURL) => { 
        if (!photoURL) {
            axios.post(`/api/posts`, {
                personId: this.props.user.personId, 
                pageId: this.props.match.params.pageid, 
                postText
            })
            .then(response => {
                this.props.addNewPost({
                    personId: response.data.personId, 
                    pageId: response.data.pageId, 
                    postText: response.data.postText
                })
            })
            .catch(err => {
                console.log('this is the error that came from the axios.post request in the handlePostSubmit function on ProfilePage.js: ', err)
            })
        } else {
            axios.post(`/api/posts`, {
                personId: this.props.user.personId, 
                pageId: this.props.match.params.pageid, 
                postText, 
                postPhoto: photoURL
            })
            .then(response => {
                this.props.addNewPost({
                    personId: response.data.personId, 
                    pageId: response.data.pageId, 
                    postText: response.data.postText, 
                    postPhoto: response.data.postPhoto
                })
            })
            .catch(err => {
                console.log('this is the error that came from the axios.post request in the handlePostSubmit function on ProfilePage.js: ', err)
            })
        }
    }


    handleUserDisplayClick = (userPersonId, clickedPersonId) => {
        axios
        .get(`/api/landingpage/personid/${clickedPersonId}`)
        .then(response => {
            this.props.updateCurrentPageOnReduxState(response.data);
            axios
                .get(`/api/personid/${clickedPersonId}/pageid/${response.data.landing_page_id}`)
                .then(response => {
                    // if (response.data[0].post_id) {
                        this.props.updatePostsOnCurrentPageOnReduxState(response.data)
                    // }
                })
                .catch(err => {
                    console.log('this is the error that came back from the FriendsList handleUserDIsplayClick INNER axios.get request')
                })
            this.props.history.push(`/${clickedPersonId}/pages/${response.data.landing_page_id}`)
        })
        .catch(err => {
            console.log('This is the error that came back from the FriendsList.js handleUserDisplayClick fn OUTER axios.get request: ', err)
        })
    }

    render(){
        //this.props.currentPage is not needed while I'm just experimenting with this little project. 
        let arrayOfDisplayedPosts = this.props.postsOnCurrentPage.map((individualPostObject, indexOfIndividualPostObject) => { 
            if (!individualPostObject.post_photo && individualPostObject.post_text) { 
                axios
                .get(`api/pages/personid/${individualPostObject.person_id}`)
                .then(response => {
                    individualPostObject.profile_pic = response.data.profile_pic
                    individualPostObject.firstname = response.data.firstname 
                    individualPostObject.lastname = response.data.lastname
                    individualPostObject.username = response.data.username
                    })
                .catch(err => {
                    console.log("this is the err from the render method posts axios.get requests: ", err)
                })
                return (
                    <div className="ProfilePageIndividualPostWrappingDiv">
                        <div className="individualPost-UserDisplay" 
                            onClick={() => {this.handleUserDisplayClick(individualPostObject.person_id)}}
                        >   
                        <UserDisplay 
                            key={indexOfIndividualPostObject} 
                            // isFollowing={}
                            profilePic={response.data.profile_pic}
                            firstname={response.data.firstname} 
                            lastname={response.data.lastname}
                            username={response.data.username}
                            personId={response.data.person_id}
                        />
                        </div>
                        <div className="individualPost-photo-and-text-div">
                            <div 
                                className="individualPost-post-text-div"
                            >
                                {individualPostObject.post_text}
                            </div>
                        </div>
                    </div>
                )
            } else if (individualPostObject.post_photo && individualPostObject.post_text) {
                return (
                    <div className="ProfilePageIndividualPostWrappingDiv">
                        <div className="individualPost-UserDisplay"
                            onClick={() => {this.handleUserDisplayClick(individualPostObject.person_id)}}
                        >
                        <UserDisplay 
                            key={indexOfIndividualPostObject} 
                            // isFollowing={}
                            profilePic={response.data.profilePic}
                            firstname={response.data.firstname} 
                            lastname={response.data.lastname}
                            username={response.data.username}
                            personId={response.data.personId}                        
                        />
                        </div>
                        <div className="individualPost-photo-and-text-div">
                            <div 
                                className="individualPost-post-text-div"
                            >
                                {individualPostObject.post_text}
                            </div>
                            <img 
                                src={individualPostObject.post_photo}
                                alt="post-related"
                                width="350px"
                                height="250px"
                            />
                        </div>
                    </div>
                )
            }
        })
        return (
            <div className="yellowww">
                <Nav 
                    className="entire-nav-component"
                    history={this.props.history}
                    // user={this.props.user}
                />
                <UserDisplay 
                    profilePic={this.props.currentPage.profilePic}
                    firstname={this.props.currentPage.firstname}
                    lastname={this.props.currentPage.lastname}
                    username={this.props.currentPage.username}
                    personId={this.props.currentPage.personId}
                    onClick={() => {this.handleUserDisplayClick()}}
                />
                <PostTemplate 
                    handlePostSubmit={this.handlePostSubmit}
                />
                {arrayOfDisplayedPosts}
            </div>
        )
    }
}

const mapStateToProps = (reduxState) => {
    return {
        user: reduxState.reducer.user, 
        currentPage: reduxState.reducer.currentPage, 
        postsOnCurrentPage: reduxState.reducer.postsOnCurrentPage
    }
}

const mapDispatchToProps = {
    updateUserOnReduxState: updateUserOnReduxState, 
    updateCurrentPageOnReduxState: updateCurrentPageOnReduxState, 
    updatePostsOnCurrentPageOnReduxState: updatePostsOnCurrentPageOnReduxState,
    addNewPost: addNewPost, 
    getReduxState: getReduxState
}

export default connect(mapStateToProps, mapDispatchToProps)(ProfilePage)